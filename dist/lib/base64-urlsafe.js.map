{"version":3,"sources":["../../src/lib/base64-urlsafe.js"],"names":["encode","buffer","toString","replace","encodeP","decode","string","Buffer","from","slice","length","decodeP"],"mappings":";;;;;;;AAAA;;;;;;AAEA;;;;;AAMA;;;;;AAKO,MAAMA,0BAASC,UAAUA,OAC7BC,QAD6B,CACpB,QADoB,EAE7BC,OAF6B,CAErB,KAFqB,EAEd,GAFc,EAG7BA,OAH6B,CAGrB,KAHqB,EAGd,GAHc,EAI7BA,OAJ6B,CAIrB,IAJqB,EAIf,EAJe,CAAzB,C,CAIc;;;AAGrB;;;;;AAKO,MAAMC,4BAAUH,UAAU,yBAAU,MAAMD,OAAOC,MAAP,CAAhB,CAA1B;;AAGP;;;;;AAKO,MAAMI,0BAASC,UAAUC,OAAOC,IAAP,CAC9B,CAACF,SAAS,MAAMG,KAAN,CAAY,CAACH,OAAOI,MAAP,GAAgB,CAAjB,IAAsB,CAAlC,CAAV,EACGP,OADH,CACW,KADX,EACkB,GADlB,EACuB;AADvB,CAEGA,OAFH,CAEW,IAFX,EAEiB,GAFjB,CAD8B,EAI5B,QAJ4B,CAAzB;;AAQP;;;;;AAKO,MAAMQ,4BAAUL,UAAU,yBAAU,MAAMD,OAAOC,MAAP,CAAhB,CAA1B;;AAGP;;;;;;;;AAQA;;;;kBAIe;AACbD,QADa;AAEbM,SAFa;AAGbX,QAHa;AAIbI;AAJa,C","file":"base64-urlsafe.js","sourcesContent":["import asPromise from './as-promise'\n\n/**\n * url safe base64 encode/decode <a href=\"https://tools.ietf.org/html/rfc7515#appendix-C\">RFC7515 Appendic-C</a>\n * @module lib/base64-urlsafe\n */\n\n\n/**\n * url-safe base 64 encodes a buffer\n * @param {Buffer} buffer - the buffer to encode\n * @returns {String} the encoded string\n */\nexport const encode = buffer => buffer\n  .toString('base64')\n  .replace(/\\+/g, '-')\n  .replace(/\\//g, '_')\n  .replace(/=/g, '') // eslint-disable-line no-div-regex\n\n\n/**\n * url-safe base64 encode a buffer - Promise\n * @param {Buffer} buffer - the buffer to encode\n * @returns {Promise} Promise object with resolves the encoded string\n */\nexport const encodeP = buffer => asPromise(() => encode(buffer))\n\n\n/**\n * url-safe base64 decode a buffer\n * @param {String} string - the string to decode\n * @returns {Buffer} the decoded buffer\n */\nexport const decode = string => Buffer.from(\n  (string + '==='.slice((string.length + 3) % 4))\n    .replace(/\\-/g, '+') // eslint-disable-line no-useless-escape\n    .replace(/_/g, '/')\n  , 'base64'\n)\n\n\n/**\n * url-safe base64 decode a buffer - Promise\n * @param {String} string - the string to decode\n * @returns {Promise} Promise object with resolves the decoded buffer\n */\nexport const decodeP = string => asPromise(() => decode(string))\n\n\n/**\n * @typedef {Object} base64-urlsafe\n * @property {Function} encode\n * @property {Function} encodeP\n * @property {Function} decode\n * @property {Function} decodeP\n */\n\n/**\n * exports all functions as default\n * @return {base64-urlsafe} base64-urlsafe functions\n */\nexport default {\n  decode,\n  decodeP,\n  encode,\n  encodeP\n}\n"]}