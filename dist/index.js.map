{"version":3,"sources":["../src/index.js"],"names":["crypt","encrypt","data","encKey","p","Promise","resolve","then","level","encryptP","encryptSync","decrypt","string","toString","decryptP","decryptSync","decrypted","isString","defaultIsString","Error","Buffer","from","isBuffer","length"],"mappings":"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","file":"index.js","sourcesContent":["import {Z_BEST_COMPRESSION} from 'zlib'\n\nimport * as crypt from './lib/crypt'\nimport {parse, parseP, stringify, stringifyP} from './lib/json'\nimport {deflate, deflateSync, inflate, inflateSync} from './lib/zlib'\nimport {encode, encodeP, decode, decodeP} from './lib/base64-urlsafe'\n\n/**\n * encrypts, encodes and deflates a given object/string\n *\n * Encryption Process:\n *  1. stringify data (optional)\n *  2. deflate\n *  3. encrypt\n *  4. deflate\n *  5. urlsafe base64 encode\n *\n * Decryption Process:\n *  1. urlsafe base64 decode\n *  2. inflate\n *  3. decrypt\n *  4. inflate\n *  5. parse data (optional)\n *\n * @module urlsafe-crypto\n */\n\n/**\n * encrypts and encodes a given object or string\n * @example\n * const ENC_KEY = '6b7beea8ef24f7ee89e153387db8f04f'\n * // should print something like 'eJwNzAcBA0EIADBLbI66YfqX8I2ACCUcg2dSRseFKzIYpAtXM_yWN9_sDVwk9lxORTkS6op3FHdJdOmqnTI1rbrJP-FnD-wDMqcaoQ'\n * encrypt({key: 'value'}, ENC_KEY).then(result => console.log(result))\n * @param  {Object|String} data the data to encrypt\n * @param  {String} encKey Encryption Key, length must be 32 (256 Bit)\n * @return {Promise} Promise which resolves with the resulting String\n */\nexport const encrypt = (data, encKey) => {\n  let p = Promise.resolve(data)\n  if (typeof data === 'object') {\n    p = p.then(data => stringifyP(data))\n  }\n\n  return p\n    .then(data => deflate(data, {level: Z_BEST_COMPRESSION}))\n    .then(data => crypt.encryptP(data, encKey))\n    .then(data => deflate(data, {level: Z_BEST_COMPRESSION}))\n    .then(encodeP)\n}\n\n/**\n * encrypts and encodes a given object or string - synchronously\n * @example\n * const ENC_KEY = '6b7beea8ef24f7ee89e153387db8f04f'\n * // should print something like 'eJwNzAcBA0EIADBLbI66YfqX8I2ACCUcg2dSRseFKzIYpAtXM_yWN9_sDVwk9lxORTkS6op3FHdJdOmqnTI1rbrJP-FnD-wDMqcaoQ'\n * console.log(encrypt({key: 'value'}, ENC_KEY))\n * @param  {Object|String} data the data to encrypt\n * @param  {String} encKey Encryption Key, length must be 32 (256 Bit)\n * @return {String} the resulting string\n */\nexport const encryptSync = (data, encKey) => {\n  if (typeof data === 'object') {\n    data = stringify(data)\n  }\n\n  return encode(\n    deflateSync(\n      crypt.encrypt(deflateSync(data), encKey),\n      {level: Z_BEST_COMPRESSION}\n    )\n  )\n}\n\n/**\n * decodes and decrypts a given string\n * @example\n * const ENC_KEY = '6b7beea8ef24f7ee89e153387db8f04f'\n * // prints the object'{\"key\": \"value\"}'\n * decrypt('eJwNzAcBA0EIADBLbI66YfqX8I2ACCUcg2dSRseFKzIYpAtXM_yWN9_sDVwk9lxORTkS6op3FHdJdOmqnTI1rbrJP-FnD-wDMqcaoQ', ENC_KEY)\n *   .then(console.log)\n *\n * // prints 'tests'\n * encrypt('test', ENC_KEY).then(result => decrypt(result, ENC_KEY, true)).then(console.log)\n * @param {String} string the data to decode/decrypt\n * @param {String} encKey Encryption Key, length must be 32 (256 Bit)\n * @param {Boolean} toString=false indicates if the result should be converted into a string or object\n * @return {String|Object} the resulting string/object\n */\nexport const decrypt = (string, encKey, toString = false) => {\n  const p = decodeP(string)\n    .then(inflate)\n    .then(data => crypt.decryptP(data, encKey))\n    .then(inflate)\n    .then(data => Promise.resolve(data.toString()))\n  if (toString === true) {\n    return p\n  }\n  return p.then(parseP)\n}\n\n/**\n * decodes and decrypts a given string - synchronously\n * @example\n * const ENC_KEY = '6b7beea8ef24f7ee89e153387db8f04f'\n * // prints the object'{\"key\": \"value\"}'\n * console.log(decrypt('eJwNzAcBA0EIADBLbI66YfqX8I2ACCUcg2dSRseFKzIYpAtXM_yWN9_sDVwk9lxORTkS6op3FHdJdOmqnTI1rbrJP-FnD-wDMqcaoQ', ENC_KEY))\n *\n * // prints 'tests'\n * console.log(decrypt(encrypt('test', ENC_KEY), ENC_KEY, true))\n * @param {String} string the data to decode/decrypt\n * @param {String} encKey Encryption Key, length must be 32 (256 Bit)\n * @param {Boolean} toString=false indicates if the result should be converted into a string or object\n * @return {String|Object} the resulting string/object\n */\nexport const decryptSync = (string, encKey, toString = false) => {\n  const decrypted = inflateSync(\n    crypt.decrypt(\n      inflateSync(decode(string)),\n      encKey\n    )\n  ).toString()\n  if (toString === true) {\n    return decrypted\n  }\n  return parse(decrypted)\n}\n\n\n/**\n * @typedef {Object} urlsafe-crypto\n * @property {Function} encrypt\n * @property {Function} encryptSync\n * @property {Function} decrypt\n * @property {Function} decryptSync\n */\n\n\n/**\n * exports a init function which returns the specific methods\n * without the need of the encryption key\n * @example\n * import urlsafeCrypto from 'urlsafe-crypto'\n * const ENC_KEY = 'b6bad4846614652e7ead69df7337a7f4'\n * const crypto = urlsafeCrypto(ENC_KEY)\n *\n * // prints the object\n * crypto.encrypt({an: 'object'}).then(crypto.decrypt).then(console.log)\n * // prints 'test', important: add the isString option to the decrypt function\n * crypto.encrypt('test').then(encryptedString => crypto.decrypt(encryptedString, true)).then(console.log)\n *\n * const cryptoString = urlsafeCrypto(ENC_KEY, true)\n * // prints 'test'\n * cryptoString.encrypt('test').then(crypto.decrypt).then(console.log)\n * // prints the object, important: add the isString option to decrypt function\n * cryptoString.encrypt({an: 'object'}).then(encryptedObject => cryptoString.decrypt(encryptedObject, false)).then(console.log)\n * @param {String} encKey - encryption key\n * @param {Boolean} isString - set the default value for isString (f.e. if you only encrypt/decrypt strings)\n * @return {urlsafe-crypto} urlsafe-crypto functions\n */\nexport default (encKey, isString = false) => {\n  const defaultIsString = isString\n  if (!encKey) {\n    throw new Error('encryption key is missing')\n  }\n  if (typeof encKey === 'string') {\n    encKey = Buffer.from(encKey)\n  }\n  if (!Buffer.isBuffer(encKey)) {\n    throw new Error('a Buffer or String is required')\n  }\n  if (encKey.length !== 32) {\n    throw new Error(`invalid encryption key length (is: ${encKey.length} bytes, should be: 32 bytes)`)\n  }\n  return {\n    encrypt: data => encrypt(data, encKey),\n    encryptSync: data => encryptSync(data, encKey),\n    decrypt: (data, isString = defaultIsString) => decrypt(data, encKey, isString),\n    decryptSync: (data, isString = defaultIsString) => decryptSync(data, encKey, isString)\n  }\n}\n"]}